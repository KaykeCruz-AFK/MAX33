# -*- coding: utf-8 -*-
"""UsuáriosLogados.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pFzeHslH0uj260UVPJAhyGn3bzaxhVKN
"""

import json
from datetime import datetime

class Usuario:
    def __init__(self, user_id, nome, funcao, hora_login=None):
        self.user_id = user_id
        self.nome = nome
        self.funcao = funcao
        self.hora_login = hora_login if hora_login else None

    def login(self):
        self.hora_login = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
        print(f"\nUsuário {self.nome} (ID: {self.user_id}) logado às {self.hora_login}")

    def to_dict(self):
        return {
            "user_id": self.user_id,
            "nome": self.nome,
            "funcao": self.funcao,
            "hora_login": self.hora_login
        }

    @classmethod
    def from_dict(cls, data):
        return cls(
            user_id=data["user_id"],
            nome=data["nome"],
            funcao=data["funcao"],
            hora_login=data.get("hora_login")
        )

class SistemaTransportes:
    ARQUIVO = "usuarios_logados.json"

    def __init__(self):
        self.fila_usuarios = []
        self.carregar_dados()

    def carregar_dados(self):
        try:
            with open(self.ARQUIVO, "r", encoding="utf-8") as f:
                dados = json.load(f)
                self.fila_usuarios = [Usuario.from_dict(user) for user in dados]
            print(f"{len(self.fila_usuarios)} usuário(s) carregado(s) do arquivo.")
        except (FileNotFoundError, json.JSONDecodeError):
            print("Nenhum dado anterior encontrado. Começando com sistema vazio.")

    def salvar_dados(self):
        dados = [user.to_dict() for user in self.fila_usuarios]
        with open(self.ARQUIVO, "w", encoding="utf-8") as f:
            json.dump(dados, f, ensure_ascii=False, indent=4)

    def esta_logado(self, user_id):
        return any(user.user_id == user_id for user in self.fila_usuarios)

    def fazer_login(self):
        user_id = input("Digite o ID do usuário: ")
        if self.esta_logado(user_id):
            print(f"\nUsuário com ID {user_id} já está logado.")
            return

        nome = input("Digite o nome do usuário: ")
        funcao = input("Digite a função do usuário: ")

        usuario = Usuario(user_id, nome, funcao)
        usuario.login()
        self.fila_usuarios.append(usuario)  # adiciona no final da fila
        self.salvar_dados()

    def listar_usuarios_logados(self):
        if not self.fila_usuarios:
            print("\nNenhum usuário logado no momento.")
            return

        print("\nUsuários logados na ordem de login:")
        for user in self.fila_usuarios:
            print(f"{user.nome} - {user.funcao} - Login: {user.hora_login}")

# Exemplo de uso
if __name__ == "__main__":
    sistema = SistemaTransportes()

    while True:
        print("\n1. Fazer login")
        print("2. Listar usuários logados")
        print("3. Sair")
        escolha = input("Escolha uma opção: ")

        if escolha == "1":
            sistema.fazer_login()
        elif escolha == "2":
            sistema.listar_usuarios_logados()
        elif escolha == "3":
            print("Encerrando o sistema.")
            break
        else:
            print("Opção inválida. Tente novamente.")